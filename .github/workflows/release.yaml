name: âœ¨ Publish Release

on:
  workflow_dispatch:
  push:
    branches: ['main']
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CN_APP_SLUG: monsieurboutte/jeff-ai

jobs:
  draft:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Get the tag name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create draft release
        uses: crabnebula-dev/cloud-release@v0
        with:
          tagName: ${{ github.ref_name }}
          command: release draft ${{ env.CN_APP_SLUG }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}

  build:
    needs: draft
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          # MacOS Intel
          - host: macos-latest
            target: x86_64-apple-darwin
          # MacOS Silicon
          - host: macos-latest
            target: aarch64-apple-darwin
          # Windows
          # - host: windows-latest
          #   target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: false

      - name: Add x86_64-apple-darwin target
        if: matrix.settings.target == 'x86_64-apple-darwin'
        run: rustup target add x86_64-apple-darwin

      - name: Import Apple Developer Certificate
        if: runner.os == 'macOS'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        if: runner.os == 'macOS'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain)
          echo "Available certificates:"
          echo "$CERT_INFO"
          if [[ "$CERT_INFO" =~ \"([^\"]+)\" ]]; then
            CERT_ID="${BASH_REMATCH[1]}"
            echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          else
            echo "No valid certificate found"
            exit 1
          fi

      - name: Update signing identity
        if: runner.os == 'macOS'
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          # Backup original config
          cp src-tauri/tauri.conf.json src-tauri/tauri.conf.json.bak
          # Replace signingIdentity with the APPLE_SIGNING_IDENTITY
          jq --arg cert "$APPLE_SIGNING_IDENTITY" '.bundle.macOS.signingIdentity = $cert' \
            src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp
          mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json

      - name: build tauri app
        shell: bash
        run: |
          pnpm install
          pnpm run tauri build --ci --target ${{ matrix.settings.target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_DEVELOPMENT_TEAM: ${{ secrets.APPLE_DEVELOPMENT_TEAM }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}

      - name: upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APP_SLUG }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}

  publish:
    needs: [draft, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get the tag name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: publish release
        uses: crabnebula-dev/cloud-release@v0
        with:
          tagName: ${{ github.ref_name }}
          command: release publish ${{ env.CN_APP_SLUG }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}
